// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StansAssociates_Backend.Entities;

#nullable disable

namespace StansAssociates_Backend.Migrations
{
    [DbContext(typeof(StansassociatesAntonyContext))]
    [Migration("20250729132748_Added SchoolId where need")]
    partial class AddedSchoolIdwhereneed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("StansAssociates_Backend.Entities.Module", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("module");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("token");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("refresh_token");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("role");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Staff"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "School"
                        });
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.Route", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BoardingPoint")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("boarding_point");

                    b.Property<string>("BusNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("bus_no");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("RouteCost")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("route_cost");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint")
                        .HasColumnName("school_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("route");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("session");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("AdmissionNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("admission_no");

                    b.Property<string>("Affiliation")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("affiliation");

                    b.Property<string>("City")
                        .HasColumnType("longtext")
                        .HasColumnName("city");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("class");

                    b.Property<string>("Country")
                        .HasColumnType("longtext")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("DOA")
                        .HasColumnType("date")
                        .HasColumnName("doa");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("f_name");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("father_name");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext")
                        .HasColumnName("gender");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LName")
                        .HasColumnType("longtext")
                        .HasColumnName("l_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<string>("Pincode")
                        .HasColumnType("longtext")
                        .HasColumnName("pincode");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext")
                        .HasColumnName("remark");

                    b.Property<string>("RollNo")
                        .HasColumnType("longtext")
                        .HasColumnName("roll_no");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint")
                        .HasColumnName("routeId");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint")
                        .HasColumnName("school_id");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("section");

                    b.Property<string>("State")
                        .HasColumnType("longtext")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .HasColumnType("longtext")
                        .HasColumnName("street");

                    b.Property<string>("StudentImg")
                        .HasColumnType("longtext")
                        .HasColumnName("student_img");

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_paid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("SchoolId");

                    b.ToTable("student");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.StudentFeesHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("date")
                        .HasColumnName("paid_date");

                    b.Property<string>("PaidMode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("paid_mode");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint")
                        .HasColumnName("student_id");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("student_fees_history");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.Studentbysession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("class");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("session_id");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint")
                        .HasColumnName("student_id");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.ToTable("studentbysession");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.TeamPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("CanAdd")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_add");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_delete");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_edit");

                    b.Property<bool>("CanView")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("can_view");

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint")
                        .HasColumnName("module_id");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("TeamId");

                    b.ToTable("team_permissions");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email_id");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("gender");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("pincode");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Profile_picture");

                    b.Property<long?>("SchoolId")
                        .HasColumnType("bigint")
                        .HasColumnName("school_id");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "",
                            Country = "",
                            CreatedDate = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DOB = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailId = "Admin@Admin.com",
                            Gender = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Admin",
                            Password = "p7D/ukHhRwG3KDJKcbfMlJqrZRNEeyxW1wKAFWbTHbI=",
                            PhoneNumber = "9999999999",
                            Pincode = "",
                            ProfilePicture = "",
                            State = "",
                            Street = "",
                            UpdatedDate = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_role");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            RoleId = 1L,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.RefreshToken", b =>
                {
                    b.HasOne("StansAssociates_Backend.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.Route", b =>
                {
                    b.HasOne("StansAssociates_Backend.Entities.User", "School")
                        .WithMany("Routes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.Student", b =>
                {
                    b.HasOne("StansAssociates_Backend.Entities.Route", "Route")
                        .WithMany("Students")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StansAssociates_Backend.Entities.User", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("School");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.StudentFeesHistory", b =>
                {
                    b.HasOne("StansAssociates_Backend.Entities.Student", "Student")
                        .WithMany("StudentFeesHistories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.Studentbysession", b =>
                {
                    b.HasOne("StansAssociates_Backend.Entities.Session", "Session")
                        .WithMany("Studentbysessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StansAssociates_Backend.Entities.Student", "Student")
                        .WithMany("Studentbysessions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.TeamPermission", b =>
                {
                    b.HasOne("StansAssociates_Backend.Entities.Module", "Module")
                        .WithMany("TeamPermissions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StansAssociates_Backend.Entities.User", "Teams")
                        .WithMany("TeamPermissions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.User", b =>
                {
                    b.HasOne("StansAssociates_Backend.Entities.User", "School")
                        .WithMany("Schools")
                        .HasForeignKey("SchoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.UserRole", b =>
                {
                    b.HasOne("StansAssociates_Backend.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StansAssociates_Backend.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.Module", b =>
                {
                    b.Navigation("TeamPermissions");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.Route", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.Session", b =>
                {
                    b.Navigation("Studentbysessions");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.Student", b =>
                {
                    b.Navigation("StudentFeesHistories");

                    b.Navigation("Studentbysessions");
                });

            modelBuilder.Entity("StansAssociates_Backend.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Routes");

                    b.Navigation("Schools");

                    b.Navigation("Students");

                    b.Navigation("TeamPermissions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
